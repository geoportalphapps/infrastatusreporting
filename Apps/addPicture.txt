Ext.define('App.optionsPanel',{
	title: 'Add picture',	
	alias: 'widget.UserLogin',
	initComponent: function(){
	
		var me = this;
		Ext.apply(me,{
			items:[
				{
					xtype:'combo',
					fieldLabel:'Feature type',
					itemId:'cmbFeaturetype',
					padding:5, 
					store:['All', 'Point', 'Line', 'Polygon'],
					listeners:{
						select:function(){
							console.log(this.getValue());
							Ext.Ajax.request({
								url:'/getFeatureTypes/' + this.getValue().toUpperCase(),
								success:function(response){
									var obj = Ext.decode(response.responseText);
									var list = [];
									for(var item in obj){
										console.log(obj[item].feature_name);
										list.push(obj[item].feature_name);
										
									}
									var combo  = me.down('#cmbStructure_type')
									combo.setValue('');//clear struct type combo box
									combo.bindStore(list);
									combo.store.load();
									console.log(list);
								}
								
							})
							
						}
					}
					
				},
				{
					xtype:'combo',
					padding:5,
					fieldLabel:'Structure type',
					itemId:'cmbStructure_type',
					//store:[],
					
					
				}
				
			],
			buttons:[
				{
					text:'Apply filter',
					handler:function(){
						var feature_type=me.down('#cmbFeaturetype').getValue();
						var structure_type=me.down('#cmbStructure_type').getValue();
						
						console.log(feature_type);		
						if (feature_type !=null && feature_type!='' && structure_type!=null && structure_type!='' || feature_type=='All'){
							me.applyFilter()
						}else{
							Ext.Msg.alert('Message','All fields required!');
						}	
					}	
					
				}
			]
			
		
		
		
		

		
		
		
		})
		this.callParent();
	
	}
})